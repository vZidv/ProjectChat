// <auto-generated />
using System;
using ChatServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatServer.Migrations
{
    [DbContext(typeof(ProjectChatContext))]
    partial class ProjectChatContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatServer.Models.ChatRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarPath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ChatRoomTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__ChatRoom__3214EC077CC9DB78");

                    b.HasIndex("ChatRoomTypeId");

                    b.HasIndex(new[] { "OwnerId" }, "IX_ChatRoom_OwnerId");

                    b.ToTable("ChatRoom", (string)null);
                });

            modelBuilder.Entity("ChatServer.Models.ChatRoomMember", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RoomId", "ClientId")
                        .HasName("PK__RoomMemb__6CE1D89B7B89B302");

                    b.HasIndex(new[] { "ClientId" }, "IX_RoomMember_ClientId");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoomMember_RoleId");

                    b.ToTable("ChatRoomMember", (string)null);
                });

            modelBuilder.Entity("ChatServer.Models.ChatRoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ChatRoomType", (string)null);
                });

            modelBuilder.Entity("ChatServer.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarPath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Client__3214EC0730293144");

                    b.HasIndex(new[] { "Login" }, "UQ__Client__5E55825BB67C2F1F")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Client__A9D10534E31C2524")
                        .IsUnique();

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("ChatServer.Models.ClientSetting", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ClientId");

                    b.ToTable("ClientSettings");
                });

            modelBuilder.Entity("ChatServer.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id")
                        .HasName("PK__Message__3214EC07A5250A36");

                    b.HasIndex(new[] { "ClientId" }, "IX_Message_ClientId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("ChatServer.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasDefaultValue("#FFFFFF");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Role__3214EC07300B7F7D");

                    b.HasIndex(new[] { "Name" }, "UQ__Role__737584F660CC8A7D")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("ClientContact", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("ClientId", "ContactId");

                    b.HasIndex(new[] { "ContactId" }, "IX_ClientContact_ContactId");

                    b.ToTable("ClientContact", (string)null);
                });

            modelBuilder.Entity("MessageToChatRoom", b =>
                {
                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("ChatRoomId", "MessageId");

                    b.HasIndex(new[] { "MessageId" }, "IX_MessageToChatRoom_MessageId");

                    b.ToTable("MessageToChatRoom", (string)null);
                });

            modelBuilder.Entity("ChatServer.Models.ChatRoom", b =>
                {
                    b.HasOne("ChatServer.Models.ChatRoomType", "ChatRoomType")
                        .WithMany("ChatRooms")
                        .HasForeignKey("ChatRoomTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ChatRoom_ChatRoomType");

                    b.HasOne("ChatServer.Models.Client", "Owner")
                        .WithMany("ChatRooms")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK__ChatRoom__OwnerI__4D94879B");

                    b.Navigation("ChatRoomType");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ChatServer.Models.ChatRoomMember", b =>
                {
                    b.HasOne("ChatServer.Models.Client", "Client")
                        .WithMany("ChatRoomMembers")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK__RoomMembe__Clien__5165187F");

                    b.HasOne("ChatServer.Models.Role", "Role")
                        .WithMany("ChatRoomMembers")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__RoomMembe__RoleI__52593CB8");

                    b.HasOne("ChatServer.Models.ChatRoom", "Room")
                        .WithMany("ChatRoomMembers")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK__RoomMembe__RoomI__5070F446");

                    b.Navigation("Client");

                    b.Navigation("Role");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ChatServer.Models.ClientSetting", b =>
                {
                    b.HasOne("ChatServer.Models.Client", "Client")
                        .WithOne("ClientSetting")
                        .HasForeignKey("ChatServer.Models.ClientSetting", "ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientSettings_Client");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ChatServer.Models.Message", b =>
                {
                    b.HasOne("ChatServer.Models.Client", "Client")
                        .WithMany("Messages")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK__Message__ClientI__5535A963");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClientContact", b =>
                {
                    b.HasOne("ChatServer.Models.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientContact_Client");

                    b.HasOne("ChatServer.Models.Client", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientContact_Client1");
                });

            modelBuilder.Entity("MessageToChatRoom", b =>
                {
                    b.HasOne("ChatServer.Models.ChatRoom", null)
                        .WithMany()
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MessageToChatRoom_ChatRoom");

                    b.HasOne("ChatServer.Models.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MessageToChatRoom_Message");
                });

            modelBuilder.Entity("ChatServer.Models.ChatRoom", b =>
                {
                    b.Navigation("ChatRoomMembers");
                });

            modelBuilder.Entity("ChatServer.Models.ChatRoomType", b =>
                {
                    b.Navigation("ChatRooms");
                });

            modelBuilder.Entity("ChatServer.Models.Client", b =>
                {
                    b.Navigation("ChatRoomMembers");

                    b.Navigation("ChatRooms");

                    b.Navigation("ClientSetting");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ChatServer.Models.Role", b =>
                {
                    b.Navigation("ChatRoomMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
